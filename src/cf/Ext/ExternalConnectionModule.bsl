Перем глТекущийПользователь Экспорт;
Процедура ПриНачалеРаботыСистемы()
	
	ОписаниеОшибкиОпределенияПользователя = "";
	Если НЕ ОпределитьТекущегоПользователя(глТекущийПользователь, ОписаниеОшибкиОпределенияПользователя) Тогда
		
//		Предупреждение(ОписаниеОшибкиОпределенияПользователя);
//		ЗавершитьРаботуСистемы(Ложь);
		Возврат;
		
	КонецЕсли;
	
//	УстановитьПараметрыСеанса(глТекущийПользователь);
	
КонецПроцедуры

//Функция ПолучитьСсылкуНаХранилищеФайлов(ПолноеИмяФайла,ИмяФайла,Расширение) Экспорт
//	Строка = СокрЛП(ПолноеИмяФайла);
//	мРасширение = "";
//	i1 = СтрДлина(Строка);
//	Пока i1 > 0 Цикл
//		Если Сред(Строка,i1,1) = "." Тогда
//			Прервать;
//		КонецЕсли;
//		мРасширение = Сред(Строка,i1,1) + мРасширение;
//		i1 = i1 - 1;
//	КонецЦикла;	
//	
//	Файл = Новый ДвоичныеДанные(ПолноеИмяФайла);
//	НоваяЗапись = Справочники.Файлы.СоздатьЭлемент();
//	НоваяЗапись.Наименование = ПолноеИмяФайла;
//	НоваяЗапись.Расширение = мРасширение;
//	НоваяЗапись.ХранилищеФайла = Новый  ХранилищеЗначения(Файл);
//	НоваяЗапись.Записать();
//	Возврат НоваяЗапись.Ссылка;
//КонецФункции


///////////////////////////////////////////////////////////////////

// Функция возвращает список значений права, установленных для пользователя.
// Если количество значений меньше количество доступных ролей, то возвращается значение по умолчанию
//
// Параметры:
//  Право               - право, для которого определяются значения
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений)
//
// Возвращаемое значение:
//  Список всех значений, установленных наборам прав (ролям), доступных пользователю
//
//Функция ПолучитьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию = Неопределено, Пользователь = Неопределено) Экспорт
//
//	ВозвращаемыеЗначения = Новый СписокЗначений;
//	СписокНабораПрав = ПолучитьСписокНабораПрав(Пользователь);
//
//	Запрос = Новый Запрос;
//
//	Запрос.УстановитьПараметр("НаборПрав"        , СписокНабораПрав);
//	Запрос.УстановитьПараметр("ПравоПользователя", Право);
//
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Значение
//	|ИЗ
//	|	РегистрСведений.ЗначенияПравПользователя КАК РегистрЗначениеПрав
//	|
//	|ГДЕ
//	|	Право = &ПравоПользователя
//	| И НаборПрав В(&НаборПрав)
//	|
//	|";
//
//	Выборка = Запрос.Выполнить().Выбрать();
//
//	Если Выборка.Количество() < СписокНабораПрав.Количество() Тогда
//		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
//	КонецЕсли;
//
//	Пока Выборка.Следующий() Цикл
//		Если ВозвращаемыеЗначения.НайтиПоЗначению(Выборка.Значение) = Неопределено Тогда
//			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
//		КонецЕсли;
//	КонецЦикла;
//
//	Возврат ВозвращаемыеЗначения;
//
//КонецФункции // ПолучитьЗначениеПраваПользователя()

// Функция возвращает признак защищать таблицу от редактирования или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если таблицу необходимо защитить от редактирования, иначе Ложь.
//
//Функция ЗащитаТаблиц() Экспорт
//
//	РазрешеноРедактирование = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеТаблиц, Истина);
//
//	Если (РазрешеноРедактирование.Количество() = 0)
//	 ИЛИ (РазрешеноРедактирование.Количество() > 1) Тогда
//		Возврат Ложь;
//	Иначе
//		Возврат НЕ РазрешеноРедактирование[0].Значение;
//	КонецЕсли;
//
//КонецФункции // ЗащитаТаблиц()

// Процедура инициализирует глобальную переменную глТекущийПользователь.
// Переменная содержит ссылку на элемент справочника "Пользователи", 
// соответствующий текущему пользователю информационной базы.
//
// Параметры:
//  Нет.
//
Функция ОпределитьТекущегоПользователя(глТекущийПользователь, ОписаниеОшибкиОпределенияПользователя = "") Экспорт

	ИмяПользователя = ИмяПользователя();
	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		// пользователь не авторизовался
		ИмяПользователя = "НеАвторизован";
	КонецЕсли;
	
	Администратор	= РольДоступна("Администратор");
	Постановщик		= РольДоступна("Постановщик");
	Разработчик		= РольДоступна("Разработчик");
	
	глТекущийПользователь = ИмяПользователя;
	
	Если НЕ (РольДоступна("Администратор") ИЛИ 
			 РольДоступна("Постановщик") ИЛИ 
			 РольДоступна("Разработчик")) Тогда
			 
			 ОписаниеОшибкиОпределенияПользователя = "Пользователь : " + ИмяПользователя + "
				|Вход в программу возможен только при наличии ролей ""Администратор/Постановщик/Разработчик"".";
			Возврат Истина;
			
	КонецЕсли;
		
	
	НачатьТранзакцию();

	Попытка
		
		// выполняем запрос по поиску элемента в справочнике пользователей
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Первые 1
					   |	Пользователи.Ссылка КАК ССЫЛКА
					   |ИЗ
					   |	Справочник.Пользователи КАК Пользователи
					   |ГДЕ
					   |	Пользователи.Код = &КодПользователя
					   |
					   |ДЛЯ ИЗМЕНЕНИЯ";
					   
		Запрос.УстановитьПараметр("КодПользователя", ИмяПользователя);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			глТекущийПользователь = Выборка.Ссылка;
			
		Иначе	
			
			глТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
			
		КонецЕсли;
		
		Если НЕ ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
			
			ЗафиксироватьТранзакцию();
//			УстановитьПараметрСеансаТекущийПользователь(глТекущийПользователь);
			Возврат Истина;
			
		КонецЕсли;
			
		// не нашли пользователя
		// попытаемся создать нового пользователя - не авторизован, если есть полные права
		Если НЕ (РольДоступна("Администратор") ИЛИ 
				 РольДоступна("Постановщик") ИЛИ 
				 РольДоступна("Разработчик")) Тогда
			
			ЗафиксироватьТранзакцию();
			
			// не доступна роль полные права - ничего сделать не удасться
			ОписаниеОшибкиОпределенияПользователя = "Пользователь : " + ИмяПользователя + " не был найден в справочнике пользователей.
			|Вход в программу возможен только при наличии ролей ""Администратор/Постановщик/Разработчик"" или при наличии пользователя в справочнике.";

			Возврат Ложь;
				
		КонецЕсли;		
			
		Если ПустаяСтрока(ИмяПользователя()) Тогда
			ПолноеИмяПользователя = "Не авторизован";
		Иначе
			ПолноеИмяПользователя = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя).ПолноеИмя;
		КонецЕсли;
			
		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();

		ОбъектПользователь.Код          = ИмяПользователя;
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;

		ОбъектПользователь.Записать();
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибкиОпределенияПользователя = "Пользователь : " + ИмяПользователя + " не был найден в справочнике пользователей. 
		|Возникла ошибка при добавлении пользователя в справочник.
		|" + ОписаниеОшибки();
		Возврат Ложь;
			
	КонецПопытки;
		
	#Если Клиент Тогда
		Сообщить("Пользователь зарегистрирован в справочнике пользователей.");
	#КонецЕсли
	
	глТекущийПользователь = ОбъектПользователь.Ссылка;
		
//	УстановитьПараметрСеансаТекущийПользователь(глТекущийПользователь);
//	УстановитьНастройкиПоУмолчанию(глТекущийПользователь);
		
	Возврат Истина;
	
КонецФункции // ОпределитьТекущегоПользователя()

Функция ЗначениеНеЗаполнено(Значение) Экспорт

	Попытка
		Возврат НЕ ЗначениеЗаполнено(Значение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ЗначениеНеЗаполнено()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОЛЬЗОВАТЕЛЯМИ ИБ

//Функция создает нового пользователя ИБ с настройками по умолчанию и возвращает его
//Функция ДобавитьНовогоПользователяИБ(ИмяПользователя, ПолноеИмя = Неопределено, СообщатьОДобавленииПользователя = Истина, ЗаписатьПользователяВИБ = Истина) Экспорт
//	
//	НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
//	НовыйПользователь.Имя = ИмяПользователя;
//	НовыйПользователь.ПолноеИмя = ?(ЗначениеНеЗаполнено(ПолноеИмя), ИмяПользователя, ПолноеИмя);
//	
//	НовыйПользователь.АутентификацияСтандартная = Истина;
//	НовыйПользователь.ПоказыватьВСпискеВыбора = Истина;
//	
//	Если ЗаписатьПользователяВИБ Тогда
//		
//		Попытка
//			НовыйПользователь.Записать();
//			#Если Клиент Тогда
//			Если СообщатьОДобавленииПользователя Тогда
//				Сообщить("В список пользователей ИБ добавлен пользователь с именем """ + ИмяПользователя + """");
//			КонецЕсли;
//			#КонецЕсли
//
//		Исключение
//		
//			#Если Клиент Тогда
//			Сообщить("Ошибка при добавлении пользователя в список пользователей ИБ """ + ИмяПользователя + """");
//			#КонецЕсли
//	
//		КонецПопытки;
//	
//	КонецЕсли;	
//	
//	Возврат НовыйПользователь;
//КонецФункции
//
//// Функция по имени ищет пользователя ИБ, если не находит - создает нового и его возвращает
//// Параметры:
////	ИмяПользователя - строка по которой ищется пользователь ИБ
////  ПолноеИмяПользователя - строка, при добавлении пользователя ИБ таким будет установлено полное имя пользователя
////	СообщатьОДобавленииПользователя - Булево, нужно ли сообщать о добавлении нового пользователя ИБ
////	ЗаписатьПользователяВИБ - Нужно ли при добавлении пользователя записывать его
//Функция НайтиПользователяИБ(ИмяПользователя) Экспорт
//	
//	Если ИмяПользователя = "НеАвторизован" Тогда
//		ПользовательИБ = Неопределено
//	Иначе
//		// ищем пользователя ИБ по имени
//		Попытка
//			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
//		Исключение
//			ПользовательИБ = Неопределено;
//		КонецПопытки;
//		
//	КонецЕсли;
//	
//	Возврат ПользовательИБ;
//КонецФункции
//
//// Функция дополняет ИМЯ пробелами справа до длины 50
//Функция СформироватьИмяПользователяВСправочнике(Имя) Экспорт
//	
//	ИмяПользователя = Имя;
//	Для Счетчик = СтрДлина(ИмяПользователя) + 1 По 50 Цикл
//		ИмяПользователя = ИмяПользователя + " ";	
//	КонецЦикла;
//	
//	ИмяПользователя = Лев(ИмяПользователя, 50);
//	
//	Возврат ИмяПользователя;
//	
//КонецФункции
//
//// Процедура синхронизирует справочник пользователей с пользователями ИБ
//Процедура СинхронизироватьПользователейИПользователейИБ() Экспорт
//	
//	// при синхронизации списков пользователей и пользователей ИБ приоритетом
//	// пользуются пользователи ИБ
//	// если нет пользователя ИБ, то такой элемент списка пользователей помечаем на удаление
//	// если пользователь ИБ есть а всписке такоео элемента нет, то добавляем его, а если он помечен на удаение, то снимаем пометку
//	
//	// имена пользователей ИБ могут быть заданы с незначащими символами
//	// надо все незначимые символы из имен пользователей ИБ убрать
//	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
//	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
//		
//		ИмяПользователяИБ = СокрЛП(ПользовательИБ.Имя);	
//		Если ИмяПользователяИБ <> ПользовательИБ.Имя Тогда
//			
//			СтароеИмяПользователяИБ = ПользовательИБ.Имя;
//			// полное имя тоже изменим если оно совпадает с имененм самого пользователя
//			Если ПользовательИБ.ПолноеИмя = ПользовательИБ.Имя Тогда
//				ПользовательИБ.ПолноеИмя = ИмяПользователяИБ;	
//			КонецЕсли;
//			ПользовательИБ.Имя = ИмяПользователяИБ;
//			
//			Попытка
//				ПользовательИБ.Записать();
//			Исключение
//				// не смогли пользователя еще одного записать, значит есть очень похожие имена
//				Сообщить("В списке пользователей базы данных присутсвуют пользователи с именами """ + 
//					СтароеИмяПользователяИБ + """ и """ + ИмяПользователяИБ + """", СтатусСообщения.Важное);
//					
//				Сообщить("Этим пользователям будет сопоставлен единственный элемент справочника ""Пользователи"" с именем  """ + ИмяПользователяИБ + """", СтатусСообщения.Важное);	
//			КонецПопытки;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	// 1 Пробегаем по справочнику пользователей и каких пользователей в ИБ
//	// не нашли - тех помечаем на удаление
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст = "ВЫБРАТЬ
//					|	Пользователи.*
//					|ИЗ
//					|	Справочник.Пользователи КАК Пользователи
//					|
//					| ГДЕ Пользователи.ЭтоГруппа = Ложь 
//					|	И Пользователи.ПометкаУдаления = Ложь";
//	
//	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
//	Для Каждого ПользовательСправочника Из ТаблицаПользователей Цикл
//
//		// Для пользователя с пустым именем не надо пользователя в ИБ создавать
//		ИмяПользователя = СокрЛП(ПользовательСправочника.Код);
//		Если ИмяПользователя = "" ИЛИ ИмяПользователя = "НеАвторизован" Тогда           
//			Продолжить;
//		КонецЕсли;
//			
//		// ищем пользователя ИБ по имени
//		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
//		Если ПользовательИБ = Неопределено Тогда
//			// такого пользователя не нашли в пользователях ИБ - помечаем его на удаление
//			
//			ПользовательСсылка = Справочники.Пользователи.НайтиПоКоду(ПользовательСправочника.Код);
//			// такого быть не может - должны найти всегда
//			Если ЗначениеНеЗаполнено(ПользовательСсылка) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ПользовательОбъект = ПользовательСсылка.ПолучитьОбъект();
//			Попытка
//				// обходим что бы можно было установить пометку на удаление
//				ПользовательОбъект.ОбменДанными.Загрузка = Истина;
//				ПользовательОбъект.УстановитьПометкуУдаления(Истина, Ложь);
//				#Если Клиент Тогда
//				Сообщить("Пользователь """ + СокрЛП(ПользовательОбъект.КОД) + """ помечен на удаление в справочнике пользователей.");
//				#КонецЕсли
//
//			Исключение
//				
//				#Если Клиент Тогда
//				Сообщить("Ошибка при пометке на удаления пользователя """ + СокрЛП(ПользовательОбъект.КОД) + """. " + ОписаниеОшибки());
//				#КонецЕсли
// 			
//			КонецПопытки;
//			
//		КонецЕсли;
//	
//	КонецЦикла;
//	
//	// 2 Пробегаем по пользователеям ИБ и тех кого не нашли в справочнике добавляем
//	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
//		
//		ИмяПользователяВСправочнике = СформироватьИмяПользователяВСправочнике(ПользовательИБ.Имя);
//		ПользовательСправочника = Справочники.Пользователи.НайтиПоКоду(ИмяПользователяВСправочнике);
//		// пользователя в справочнике нашли
//		Если НЕ ЗначениеНеЗаполнено(ПользовательСправочника) Тогда
//			
//			ПользовательОбъект = ПользовательСправочника.ПолучитьОбъект();
//			// нельзя что бы имя пользователя ИБ совпадало с именем группы
//			Если ПользовательОбъект.ЭтоГруппа Тогда
//				
//				#Если Клиент Тогда
//				Сообщить("Имя пользователя ИБ """ + СокрЛП(ПользовательОбъект.КОД) + """ совпадает с именем группы в справочнике пользователей!", СтатусСообщения.Важное);
//				#КонецЕсли
//
//				Продолжить;
//			КонецЕсли;
//			
//			Если НЕ ПользовательОбъект.ПометкаУдаления Тогда
//				Продолжить;
//			КонецЕсли;
//				
//			Попытка
//				// обходим что бы можно было установить пометку на удаление
//				ПользовательОбъект.ОбменДанными.Загрузка = Истина;
//				ПользовательОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
//				ПользовательОбъект.мПользовательИБ = ПользовательИБ;
//				ПользовательОбъект.Код          = ИмяПользователяВСправочнике;
//				ПользовательОбъект.Наименование = ПользовательИБ.ПолноеИмя;
//					
//				ПользовательОбъект.Записать();
//				#Если Клиент Тогда
//				Сообщить("У пользователя """ + СокрЛП(ПользовательОбъект.КОД) + """ снята пометка на удаление в справочнике пользователей.");
//				#КонецЕсли
//
//			Исключение
//					
//				#Если Клиент Тогда
//				Сообщить("Ошибка при снятии пометки на удаления у пользователя """ + СокрЛП(ПользовательОбъект.КОД) + """. " + ОписаниеОшибки());
//				#КонецЕсли
//	 			
//			КонецПопытки;
//			
//		Иначе
//			// пользователя в справочнике не нашли
//			ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
//			ОбъектПользователь.мПользовательИБ = ПользовательИБ;
//			ОбъектПользователь.Код          = ИмяПользователяВСправочнике;
//			ОбъектПользователь.Наименование = ПользовательИБ.ПолноеИмя;
//
//			Попытка
//				ОбъектПользователь.Записать();
//				
//				#Если Клиент Тогда
//				Сообщить("Пользователь """ + СокрЛП(ПользовательИБ.Имя) + """ зарегистрирован в справочнике пользователей.");
//				#КонецЕсли
//			Исключение
//				СообщитьОбОшибке("Ошибка при добавлении пользователя """ + СокрЛП(ПользовательИБ.Имя) + """ в справочник.");
//			КонецПопытки;
//
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры
//
//// Процедура копирует пользователя ИБ с определенным именем и создает нового с такими же настройками
//Функция СкопироватьПользователяИБ(ИмяПользователяИБ) Экспорт
//	
//	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
//	Если ПользовательИБ = Неопределено Тогда
//		ПолноеИмяПользователяИБ = ИмяПользователяИБ;
//	Иначе
//		ПолноеИмяПользователяИБ = ПользовательИБ.ПолноеИмя;
//	КонецЕсли;
//	
//	НовыйПользовательИБ = ДобавитьНовогоПользователяИБ(ИмяПользователяИБ, ПользовательИБ.ПолноеИмя, Ложь, Ложь);
//	
//	Если ПользовательИБ <> Неопределено Тогда
//		// Если есть от кого копировать настройки - копируем
//		НовыйПользовательИБ.ПользовательОС = ПользовательИБ.ПользовательОС;
//		НовыйПользовательИБ.Пароль = "";
//		НовыйПользовательИБ.АутентификацияСтандартная = ПользовательИБ.АутентификацияСтандартная;
//		НовыйПользовательИБ.ПоказыватьВСпискеВыбора = ПользовательИБ.ПоказыватьВСпискеВыбора;
//		НовыйПользовательИБ.АутентификацияОС = ПользовательИБ.АутентификацияОС;
//		НовыйПользовательИБ.Язык = ПользовательИБ.Язык;
//		НовыйПользовательИБ.ОсновнойИнтерфейс = ПользовательИБ.ОсновнойИнтерфейс;
//		
//		// Роли сохраняем
//		Для Каждого ДоступныеРолиПользователяИБ Из ПользовательИБ.Роли Цикл
//			НовыйПользовательИБ.Роли.Добавить(ДоступныеРолиПользователяИБ);
//		КонецЦикла; 
//	
//	КонецЕсли;
//  	
//	Возврат  НовыйПользовательИБ;
//	
//КонецФункции
//
//#Если Клиент Тогда
//
////Функция редактирует или создает нового пользователя ИБ
////Процедура редактирует пользователя ИБ
//Функция РедактироватьИлиСоздатьПользователяИБ(ОбъектПользователя, ТекущийПользовательИБ, Знач Модифицированность = Ложь,
//	Знач ПользовательДляКопированияНастроек = Неопределено) Экспорт
//	
//	СозданНовыйЭлемент = Ложь;
//	
//	Если ТекущийПользовательИБ = Неопределено Тогда
//		
//		Если ОбъектПользователя = Неопределено Тогда
//			Возврат Ложь;
//		КонецЕсли;
//		
//		ИмяПользователя = СокрЛП(ОбъектПользователя.Код);
//		
//		ОтветПользователя = Вопрос("Пользователь ИБ с именем """ + ИмяПользователя + """ не найден. Создать нового пользователя ИБ?", РежимДиалогаВопрос.ДаНет);
//		Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
//			Возврат Ложь;
//		КонецЕсли;
//		
//		// создаем нового пользователя ИБ
//		ТекущийПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
//		ТекущийПользовательИБ.Имя = ИмяПользователя;
//		ТекущийПользовательИБ.ПолноеИмя = СокрЛП(ОбъектПользователя.Наименование);
//		
//		СозданНовыйЭлемент = Истина;		
//		
//	КонецЕсли;
//	
//	// надо показать форму редактирования настроек пользователя ИБ
//	ФормаРедактированияПользователяИБ = ПолучитьОбщуюФорму("ФормаПользователяИБ");
//	ФормаРедактированияПользователяИБ.ПользовательИБ = ТекущийПользовательИБ;
//	ФормаРедактированияПользователяИБ.ПользовательДляКопированияНастроек = ПользовательДляКопированияНастроек;
//	ФормаРедактированияПользователяИБ.Модифицированность = Модифицированность ИЛИ СозданНовыйЭлемент;
//	ФормаРедактированияПользователяИБ.Пользователь = ОбъектПользователя;
//	
//	РезультатОткрытия = ФормаРедактированияПользователяИБ.ОткрытьМодально();
//	
//	Возврат РезультатОткрытия;
//	
//КонецФункции
//
//#КонецЕсли
