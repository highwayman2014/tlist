Процедура ОбработкаЗаполнения(Основание) Экспорт	
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
//	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Задание") Тогда
		// Заполнение шапки
		//ДокументОснование = Основание.Ссылка;
		//АдресФайлаТЗ = Основание.АдресФайлаТЗ;
		//Заказчик = Основание.Заказчик;
		//Комментарий = Основание.Комментарий;
		//КомментраийКФайлу = Основание.КомментраийКФайлу;
		//Конфигурация = Основание.Конфигурация;
		//Постановщик = Основание.Постановщик;
		//Срочность = Основание.Срочность;
		//Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		//Статус = Основание.Статус;
		//Тема = Основание.Тема;
		//Для Каждого ТекСтрокаФайлы Из Основание.Файлы Цикл
		//	НоваяСтрока = Файлы.Добавить();
		//	НоваяСтрока.АдресФайла = ТекСтрокаФайлы.АдресФайла;
		//	НоваяСтрока.Комментарий = ТекСтрокаФайлы.Комментарий;
		//КонецЦикла;
//	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    
    мИспользоватьЗапрет = Ложь;
    
    мИспользоватьДатуЗапретаДляПользователейСАдминистративнымиПравами = Константы.ИспользоватьДатуЗапретаДляПользователейСАдминистративнымиПравами.Получить();
    
    //---------------================== #13948# Dimma Begin 29.12.16 ==================---------------
    Если мИспользоватьДатуЗапретаДляПользователейСАдминистративнымиПравами Тогда
        мИспользоватьЗапрет = Истина;
    Иначе
        Если НЕ РольДоступна("РедактированиеДатыЗапретаРедактированияПринятыхТлистов") Тогда
            мИспользоватьЗапрет = Истина;
        КонецЕсли; 
    КонецЕсли;
    //---------------================== #13948# Dimma End   29.12.16 ==================---------------  
    
    Если мИспользоватьЗапрет Тогда
        мДатаЗапретаРедактированияПринятыхТлистов = Константы.ДатаЗапретаРедактированияПринятыхТлистов.Получить();
        
        Если (ЗначениеЗаполнено(Ссылка.ДатаПриемки) И Ссылка.ДатаПриемки <= мДатаЗапретаРедактированияПринятыхТлистов И Ссылка.Статус = Перечисления.Статус.Принято) ИЛИ 
            (ЗначениеЗаполнено(ДатаПриемки) И ДатаПриемки <= мДатаЗапретаРедактированияПринятыхТлистов И Статус = Перечисления.Статус.Принято) Тогда
            Сообщить("Нельзя сохранить Документ в статусе Принято и с ДатойПриемки меньше или равно ДатаЗапретаРедактированияПринятыхТлистов: " + мДатаЗапретаРедактированияПринятыхТлистов);
            Отказ = Истина;
            Возврат;
        КонецЕсли; 
    КонецЕсли; 
	
	Если Категория.СТО = Ложь Тогда
			
		Если (Не ЗначениеЗаполнено(НачалоПлан) 
			Или Не ЗначениеЗаполнено(ОкончаниеПлан) 
			Или Не ЗначениеЗаполнено(ПлановыеТрудозатраты))
			И Статус <> Перечисления.Статус.Новое Тогда
			
			Сообщить("Нельзя сохранить Документ в статусе отличным от ""Новое"" с незаполненными ревизитами ""Начало план"", ""Окончание план"", ""Плановые трудозатраты"".");
	        Отказ = Истина;
	 		
		КонецЕсли;
		
		Для Каждого Стр Из ТрудозатратыИсполнителей Цикл
			Если ПустаяСтрока(Стр.Комментарий) и ПараметрыСеанса.ТекущийПользователь = Стр.Исполнитель Тогда
				
				Сообщить("Нельзя сохранить Документ с пустым комметариейм на вкладке ""Трудозатраты исполнителей"".");
		        Отказ = Истина;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
    мМинимальнаяДата = Дата(2100,01,01);
    мМаксимальнаяДата = Дата(2000,01,01);
    СуммаВремяФакт = 0;
    Для Каждого Строка Из ТрудозатратыИсполнителей Цикл;
        Если Строка.Дата < мМинимальнаяДата Тогда
        	мМинимальнаяДата = Строка.Дата;
        КонецЕсли; 
        Если Строка.Дата > мМаксимальнаяДата Тогда
        	мМаксимальнаяДата = Строка.Дата;
        КонецЕсли; 
		Строка.ЗатраченноеВремя = Строка.Часы + (Строка.Минуты / 60);
        СуммаВремяФакт = СуммаВремяФакт + Строка.ЗатраченноеВремя;
	КонецЦикла;
	Для каждого Строка Из Обсуждение Цикл
		Если НЕ Строка.УведомлениеОтправлено Тогда
		    Если ПослатьСообщениеОбОбсуждении(Строка) Тогда
				Строка.УведомлениеОтправлено = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	Комментарий = СтрЗаменить(Комментарий, "xml", "ХМL");

    //---------------================== #7015# Dimma Begin 12.02.15 ==================---------------
    Если Статус = Перечисления.Статус.Принято Тогда
    	НачалоПлан          = Дата;
        НачалоФакт          = мМинимальнаяДата;
        ПринятоКИсполнению  = мМинимальнаяДата;
        ОкончаниеФакт       = мМаксимальнаяДата;
        ВремяФакт           = СуммаВремяФакт;
        Если НЕ ЗначениеЗаполнено(ДатаПриемки) Тогда
            ДатаПриемки = ТекущаяДата();
        КонецЕсли; 
    КонецЕсли; 
    //---------------================== #7015# Dimma End   12.02.15 ==================---------------  
    Если ЗначениеЗаполнено(ИмяФайла1) ИЛИ
        ЗначениеЗаполнено(ИмяФайла2) ИЛИ
        ЗначениеЗаполнено(ИмяФайла3) ИЛИ
        ЗначениеЗаполнено(ИмяФайла4) ИЛИ
        ЗначениеЗаполнено(ИмяФайла5) ИЛИ
        ЗначениеЗаполнено(ИмяФайла6) ИЛИ
        ЗначениеЗаполнено(ИмяФайла7) ИЛИ
        ЗначениеЗаполнено(ИмяФайла8) ИЛИ
        ЗначениеЗаполнено(ИмяФайла9) ИЛИ
        ЗначениеЗаполнено(ИмяФайла10)
        Тогда
    	ЕстьФайлы = Истина;
    Иначе    
    	ЕстьФайлы = Ложь;
    КонецЕсли; 
	
КонецПроцедуры

Функция ОчиститьСсылкуНаФайл(НомерФайла) Экспорт
	Если НомерФайла	= 1 Тогда
		ВидПрикрепленногоДокумента = Перечисления.ВидДокумента.ПустаяСсылка();
		ПрикрепленныйДокумент = Неопределено;
		АдресФайлаТЗ = "";
	Иначе
		ВидПрикрепленногоДокумента1 = Перечисления.ВидДокумента.ПустаяСсылка();
		ПрикрепленныйДокумент1 = Неопределено;
		АдресФайлаТЗ1 = "";
	КонецЕсли;
КонецФункции

Функция ПолучитьСсылкуНаХранилищеФайлов(ПолноеИмяФайла,ИмяФайла,Расширение) Экспорт
	Строка = СокрЛП(ПолноеИмяФайла);
	мРасширение = "";
	i1 = СтрДлина(Строка);
	Пока i1 > 0 Цикл
		Если Сред(Строка,i1,1) = "." Тогда
			Прервать;
		КонецЕсли;
		мРасширение = Сред(Строка,i1,1) + мРасширение;
		i1 = i1 - 1;
	КонецЦикла;	
	
	Файл = Новый ДвоичныеДанные(ПолноеИмяФайла);
	НоваяЗапись = Справочники.Файлы.СоздатьЭлемент();
	НоваяЗапись.Наименование = ПолноеИмяФайла;
	НоваяЗапись.Расширение = мРасширение;
	НоваяЗапись.ХранилищеФайла = Новый  ХранилищеЗначения(Файл);
	НоваяЗапись.Записать();
	Возврат НоваяЗапись.Ссылка;
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	//// Проверим заполненность поля "Постановщик"
	//Если Постановщик.Пустая() Тогда
	//	
	//	// Если поле Тема не заполнено, сообщим об этом пользователю
	//	Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = "Не указан Покупатель, для которого выписывается накладная!";
	//	Сообщение.Поле = "Постановщик";
	//	Сообщение.УстановитьДанные(ЭтотОбъект);
	//	
	//	Сообщение.Сообщить();
	//	
	//	// Сообщим платформе, что мы сами обработали проверку заполнения поля "Постановщик"
	//	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Постановщик"));
	//	// Так как информация в документе не консистентна, то продолжать работу дальне смысла нет
	//	Отказ = Истина;
	//	
	//КонецЕсли;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ТрудозатратыИсполнителей.Очистить();
    СписокИсполнителей.Очистить();
    Файлы.Очистить();
    Обсуждение.Очистить();
    
    НачалоПлан = Неопределено;
    ОкончаниеПлан = Неопределено;
    ВремяПлан = Неопределено;
    Статус = Неопределено;
    НачалоФакт = Неопределено;
    ПринятоКИсполнению = Неопределено;
    ОкончаниеФакт = Неопределено;
    ОкончаниеФакт = Неопределено;
    ДатаПриемки = Неопределено;
    ОтветственныйИсполнитель = Справочники.Пользователи.ПустаяСсылка();
    ОтчетОПроделаннойРаботе = Неопределено;
    АдресФайлаТЗ = Неопределено;
    ВремяФакт = Неопределено;
    ФайлТЗ1 = Неопределено;
    ИмяФайла1 = Неопределено;
    Файл1 = Неопределено;
    ФайлТЗ2 = Неопределено;
    ИмяФайла2 = Неопределено;
    Файл2 = Неопределено;
    ФайлТЗ3 = Неопределено;
    ИмяФайла3 = Неопределено;
    Файл3 = Неопределено;
    ФайлТЗ4 = Неопределено;
    ИмяФайла4 = Неопределено;
    Файл4 = Неопределено;
    ФайлТЗ5 = Неопределено;
    ИмяФайла5 = Неопределено;
    Файл5 = Неопределено;
    ФайлТЗ6 = Неопределено;
    ИмяФайла6 = Неопределено;
    Файл6 = Неопределено;
    ФайлТЗ7 = Неопределено;
    ИмяФайла7 = Неопределено;
    Файл7 = Неопределено;
    ФайлТЗ8 = Неопределено;
    ИмяФайла8 = Неопределено;
    Файл8 = Неопределено;
    ФайлТЗ9 = Неопределено;
    ИмяФайла9 = Неопределено;
    Файл9 = Неопределено;
    ФайлТЗ10 = Неопределено;
    ИмяФайла10 = Неопределено;
    Файл10 = Неопределено;
    НаименованиеОбработки = Неопределено;
    ПлановыеТрудозатраты = Неопределено;
    НаименованиеОбработки = Неопределено;
    ЕстьФайлы = Неопределено;
	Подтверждение = Неопределено;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Задание = ЭтотОбъект.Ссылка;

	// Если задание переводится в состояние «Отложено» или "Отменено", то удаляются все записи в журнале.
    Если Статус = Перечисления.Статус.Отложено ИЛИ Статус = Перечисления.Статус.Отменено Тогда
		// Очищаем все записи по этому заданию
		НаборЗаписей = РегистрыСведений.ПочтовыеСообщенияПоДокументу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задание.Установить(Задание);
		НаборЗаписей.Записать(Истина);
		Возврат;
	КонецЕсли; 
	
	// Если задание переводится в состояние «Выполнено», то постановщику задачи выслать соответствующее сообщение по электронной почте.
    Если Статус = Перечисления.Статус.Выполнено Тогда
		ПослатьСообщениеОЗадании(Постановщик, Задание, Перечисления.ВидПочтовогоСообщения.ЗаданиеВыполнено);
	КонецЕсли;
	
	//==#17252#IVS Хотеев Begin 15.08.17 --------------------------
	// Если задание переводится в состояние «Принято», то АдминистраторуЗаявок выслать соответствующее сообщение по электронной почте.
	Если Статус = Перечисления.Статус.Принято Тогда
		Если ПолучитьЗначениеКонстанты("СообщатьАдминистраторуОПринятииЗаявки",Дата,ложь)=Истина Тогда
			АдминистраторЗаявок=ПолучитьЗначениеКонстанты("АдминистраторЗаявок",Дата,ложь);
			Если ЗначениеЗаполнено(АдминистраторЗаявок) Тогда
				ПослатьСообщениеОЗадании(АдминистраторЗаявок, Задание, Перечисления.ВидПочтовогоСообщения.ЗаданиеПринято);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	//==#17252#IVS Хотеев End   15.08.17 --------------------------
	
	// Добавить ответственного за конфигурацию в списке конфигураций и в случае добавления нового Задания по этой конфигурации, отправлять ему соответствующее сообщение.
	ПослатьСообщениеОЗадании(Конфигурация.Ответственный, Задание, Перечисления.ВидПочтовогоСообщения.СообщитьОЗадании);	

	// Если по заданию назначен новый исполнитель, отправлять ему сообщение по электронной почте.
	Для каждого Строка Из СписокИсполнителей Цикл
		ПослатьСообщениеОЗадании(Строка.Исполнитель, Задание, Перечисления.ВидПочтовогоСообщения.СообщитьОЗадании);
    КонецЦикла;
	
	//ivs d.dorin 21001 05-08-2019 start
	Если Обновление Тогда

		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РелизыКонфигурацийБДСрезПоследних.Конфигурация,
		                      |	РелизыКонфигурацийБДСрезПоследних.ТекущийРелиз
		                      |ИЗ
		                      |	РегистрСведений.РелизыКонфигурацийБД.СрезПоследних(&НаДату, БазаДанных В (&СписокБазДанных)) КАК РелизыКонфигурацийБДСрезПоследних");
		
		Запрос.УстановитьПараметр("НаДату", 	Дата);
		Запрос.УстановитьПараметр("СписокБазДанных", ОбновленныеБазы.ВыгрузитьКолонку("БазаДанных"));
		
		ТаблицаРелзов = Запрос.Выполнить().Выгрузить();
		Для Каждого Стр Из ОбновленныеБазы Цикл
		
			НеобходимаЗапись = Истина;
			
			Н_стр = ТаблицаРелзов.Найти(Стр.НовыйРелиз, "ТекущийРелиз");
			Если Не Н_стр = Неопределено Тогда
				НеобходимаЗапись = Не (Н_стр.Конфигурация = Стр.Конфигурация и Н_стр.ТекущийРелиз = Стр.НовыйРелиз);
			КонецЕсли;
			
			Если НеобходимаЗапись Тогда
				НоваяЗапись = РегистрыСведений.РелизыКонфигурацийБД.СоздатьМенеджерЗаписи();
				НоваяЗапись.Период = Дата;
				НоваяЗапись.БазаДанных = Стр.БазаДанных;
				НоваяЗапись.Конфигурация = Конфигурация;
				НоваяЗапись.ТекущийРелиз = Стр.НовыйРелиз;
				НоваяЗапись.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//ivs d.dorin 21001 05-08-2019 end
КонецПроцедуры

Процедура ПослатьСообщениеОЗадании(Пользователь, Задание, ВидПочтовогоСообщения)
    //==##IVS Хотеев Begin 18.10.18 --------------------------
    Если ПолучитьЗначениеКонстанты("ОтключенаОтправкаУведомленийПоПочте",текущаядата(),ложь)=Истина Тогда
		Возврат;
	КонецЕсли; 	
	//==##IVS Хотеев End   18.10.18 --------------------------
	 
	Если ВидПочтовогоСообщения = перечисления.ВидПочтовогоСообщения.ЗаданиеВыполнено Тогда
		мТема = "tlist    Задание №: "+Номер+" ВЫПОЛНЕНО";
		мВидСообщения = "Задание выполнено:";
	//==#17252#IVS Хотеев Begin 15.08.17 --------------------------
	ИначеЕсли ВидПочтовогоСообщения = перечисления.ВидПочтовогоСообщения.ЗаданиеПринято Тогда
		мТема = "tlist    Задание №: "+Номер+" ПРИНЯТО";
		мВидСообщения = "Задание принято:";
	//==#17252#IVS Хотеев End   15.08.17 --------------------------
	Иначе
		мТема = "tlist    Добавлено Задание №: "+Номер;
		мВидСообщения = "Добавлено задание:";
	КонецЕсли; 	

	Адрес = Пользователь.ПочтовыйАдрес;
	Если ЗначениеЗаполнено(Пользователь) И ЭкспортируемыеПодпрограммы.СообщениеЕщёНеОтправлено(Задание, ВидПочтовогоСообщения, Адрес) Тогда
		//ЭкспортируемыеПодпрограммы.ПослатьСообщение(Адрес,мВидСообщения+Символы.ПС+Символы.ПС+ОписаниеЗадания(),мТема);
		//Дорин 11-02-2021 добавил попытку.
		Попытка
			ЭкспортируемыеПодпрограммы.ПослатьСообщение(Адрес, ОписаниеЗаданияHTML(ВидПочтовогоСообщения), мТема, Пользователь);
			ЭкспортируемыеПодпрограммы.ЗаписатьВЖурналПочты(Задание, ВидПочтовогоСообщения, Адрес);
		Исключение
			Сообщить("Письмо не отправлено, можно продолжать работу!");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли; 

КонецПроцедуры

Функция ОписаниеЗадания()

	мИсполнители = "";
	Для каждого Строка Из СписокИсполнителей Цикл
        Если мИсполнители = "" Тогда
			мИсполнители = мИсполнители + Строка.Исполнитель;
		Иначе
			мИсполнители = мИсполнители + ", "+Строка.Исполнитель;
		КонецЕсли; 
	КонецЦикла; 

	Возврат "tlist №: "+Номер+"   от "+Формат(Дата, "ДФ=dd.MM.yy")+"
				|Срочность: "+Срочность+" 
				|Заказчик: "+Заказчик+" 
				|Постановщик: "+Постановщик+" 
				|Конфигурация: "+Конфигурация+"
				| 
				|Исполнители: "+мИсполнители+"
				| 
				|Тема: "+Тема+" 
				| 
				|Комментарий: "+Комментарий+" 
				| 
				|------------------------------------------------ 
				|Документ записан: "+ПараметрыСеанса.ТекущийПользователь+" ("+ТекущаяДата()+")
				|
				|Ссылка на документ (Shift+F11):    "+ПолучитьНавигационнуюСсылку(ЭтотОбъект);


			КонецФункции
			
Функция ОписаниеЗаданияHTML(ВидПочтовогоСообщения)
	Макет = ПолучитьМакет("СообщениеHTML");
	Рез = Макет.ПолучитьТекст();
	
	мИсполнители = "";
	Для каждого Строка Из СписокИсполнителей Цикл
        Если мИсполнители = "" Тогда
			мИсполнители = мИсполнители + Строка.Исполнитель;
		Иначе
			мИсполнители = мИсполнители + ", "+Строка.Исполнитель;
		КонецЕсли; 
	КонецЦикла;
	
	ВнутрСсылка = ПолучитьНавигационнуюСсылку(ЭтотОбъект);
	
	//ID = Найти(ВнутрСсылка, "ref=");
	//ID = Сред(ВнутрСсылка, ID+5);
	//ID = Лев(ID, СтрДлина(ID)-1);
    ID = СокрЛП(Константы.ПутьКЗаданию.Получить())+ВнутрСсылка;
	
	//ВнешСсылка  = "http://krait/tlist/#" + СтрЗаменить(ВнутрСсылка, "Документ", "Document");
	
	Если ВидПочтовогоСообщения = перечисления.ВидПочтовогоСообщения.ЗаданиеВыполнено Тогда
		Рез = СтрЗаменить(Рез, "?Добавлено/Выполнено?", "Выполнено");
	Иначе
		Рез = СтрЗаменить(Рез, "?Добавлено/Выполнено?", "Добавлено");
	КонецЕсли; 
	
	Рез = СтрЗаменить(Рез, "?ID?", ID);
	Рез = СтрЗаменить(Рез, "?Задание?", "tlist Задание № " + Номер + " от " + Дата);
	
	Если Срочность = Перечисления.Срочность.Критичная ИЛИ Срочность = Перечисления.Срочность.Высокая Тогда
		Рез = СтрЗаменить(Рез, "?Срочность?", "<FONT color=#ff0000>" + Срочность + "</FONT>");
	Иначе
		Рез = СтрЗаменить(Рез, "?Срочность?", Срочность);
	КонецЕсли;
	
	Рез = СтрЗаменить(Рез, "?Заказчик?"     , Заказчик);
	Рез = СтрЗаменить(Рез, "?Постановщик?"  , Постановщик);
	Рез = СтрЗаменить(Рез, "?Конфигурация?" , Конфигурация);
	Рез = СтрЗаменить(Рез, "?Исполнители?"  , мИсполнители);
	Рез = СтрЗаменить(Рез, "?Тема?"         , Тема);
	
	мКомментарий = СтрЗаменить(Комментарий, Символы.ПС, "<BR>");
	Рез = СтрЗаменить(Рез, "?Комментарий?"  , мКомментарий);
	
	Рез = СтрЗаменить(Рез, "?Пользователь?" , ""+ПараметрыСеанса.ТекущийПользователь+" ("+ТекущаяДата()+")");
	Рез = СтрЗаменить(Рез, "?ВнутрСсылка?"  , ВнутрСсылка);
	
	Возврат Рез;
КонецФункции			

Функция ОписаниеСообщенияHTML(ДанныеОбсуждения)

	Макет = ПолучитьМакет("ОбсуждениеHTML");
	Рез = Макет.ПолучитьТекст();
	
	ВнутрСсылка = ПолучитьНавигационнуюСсылку(ЭтотОбъект);
	
    //ID = Найти(ВнутрСсылка, "ref=");
    //ID = Сред(ВнутрСсылка, ID+5);
    //ID = Лев(ID, СтрДлина(ID)-1);
    
    ID = СокрЛП(Константы.ПутьКЗаданию.Получить())+ВнутрСсылка;
	
	Рез = СтрЗаменить(Рез, "?Вопрос/Ответ?", ДанныеОбсуждения.Вид);
	Рез = СтрЗаменить(Рез, "?Автор?", ДанныеОбсуждения.Автор);
	
	Рез = СтрЗаменить(Рез, "?ID?", ID);
	Рез = СтрЗаменить(Рез, "?Задание?", "tlist Задание № " + Номер + " от " + Дата);
	
	мТекст = СтрЗаменить(ДанныеОбсуждения.Текст, Символы.ПС, "<BR>");
	Рез = СтрЗаменить(Рез, "?ТекстВопросаОтвета?"  , мТекст);
	
	Рез = СтрЗаменить(Рез, "?Заказчик?"     , Заказчик);
	Рез = СтрЗаменить(Рез, "?Постановщик?"  , Постановщик);
	Рез = СтрЗаменить(Рез, "?Конфигурация?" , Конфигурация);
	Рез = СтрЗаменить(Рез, "?Тема?"         , Тема);
	
	мКомментарий = СтрЗаменить(Комментарий, Символы.ПС, "<BR>");
	Рез = СтрЗаменить(Рез, "?Комментарий?"  , мКомментарий);
	
	Возврат Рез;

КонецФункции // ОписаниеСообщенияHTML()
 

Функция ПослатьСообщениеОбОбсуждении(ДанныеОбсуждения)

	СписокАдресатов = Новый СписокЗначений;
	
	Если ДанныеОбсуждения.Вид = Перечисления.ВидОбсуждения.Вопрос Тогда
		// Это вопрос постановщику
		СписокАдресатов.Добавить(Постановщик.ПочтовыйАдрес);
	Иначе
		// Это ответ всем спрашившим
		Для каждого СтрокаОбсуждения Из Обсуждение Цикл
			Если СтрокаОбсуждения.Вид = Перечисления.ВидОбсуждения.Вопрос И СписокАдресатов.НайтиПоЗначению(СтрокаОбсуждения.Автор.ПочтовыйАдрес)=Неопределено Тогда
			    СписокАдресатов.Добавить(СтрокаОбсуждения.Автор.ПочтовыйАдрес);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	мТема = "tlist   по Заданию №: "+Номер+" получено новое сообщение";
	
	Для каждого Адрес Из СписокАдресатов Цикл
		ЭкспортируемыеПодпрограммы.ПослатьСообщение(Адрес.Значение, ОписаниеСообщенияHTML(ДанныеОбсуждения), мТема);
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции // ПослатьСообщениеОбОбсуждении()
 